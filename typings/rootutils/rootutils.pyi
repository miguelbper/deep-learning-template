"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Iterable, Union

def find_root(search_from: Union[str, Path] = ..., indicator: Union[str, Iterable[str]] = ...) -> Path:
    """Recursively searches for project root indicator(s), starting from given path.

    Args:
        search_from (str): Path to folder or file to start search from.
        indicator (Union[str, Iterable[str]], optional): List of filenames to search for. Finding at least one on these files indicates the project root.

    Raises:
        TypeError: If any input type is incorrect.
        FileNotFoundError: If root is not found.

    Returns:
        Path: Path to project root.
    """
    ...

def set_root(path: Union[str, Path], project_root_env_var: bool = ..., dotenv: bool = ..., pythonpath: bool = ..., cwd: bool = ...) -> None:
    """Set given path as a project root.

    Args:
        path (Union[str, Path]): Project root path.
        project_root_env_var (bool, optional): Whether to set PROJECT_ROOT environment variable.
        dotenv (bool, optional): Whether to load `.env` file from project root.
        pythonpath (bool, optional): Whether to add project root to pythonpath.
        cwd (bool, optional): Whether to set current working directory to project root.

    Raises:
        FileNotFoundError: If root path does not exist.

    Returns:
        None
    """
    ...

def setup_root(search_from: Union[str, Path], indicator: Union[str, Iterable[str]] = ..., project_root_env_var: bool = ..., dotenv: bool = ..., pythonpath: bool = ..., cwd: bool = ...) -> Path:
    """Combines `get_root()` and `set_root()` into one method.

    Recursively searches for files from the `indicators` list, starting from given path.

    Args:
        search_from (str): Path to file or folder to start search from.
        indicator (Union[str, Iterable[str]], optional): List of filenames to search for. Finding at least one on these files indicates the project root.
        project_root_env_var (bool, optional): Whether to set PROJECT_ROOT environment variable.
        dotenv (bool, optional): Whether to load `.env` file from project root.
        pythonpath (bool, optional): Whether to add project root to pythonpath.
        cwd (bool, optional): Whether to set current working directory to project root.

    Raises:
        TypeError: If any input type is incorrect.
        FileNotFoundError: If root is not found.

    Returns:
        Path: Path to project root.
    """
    ...

def autosetup(indicator=..., project_root_env_var=..., dotenv=..., pythonpath=..., cwd=...) -> Path:
    """Experimental method for less friction. Automatically inferrs `search_from` path."""
    ...
